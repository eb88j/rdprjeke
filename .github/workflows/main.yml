name: RDP
on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 4320   # 72 ساعة
    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

          # Allow RDP in firewall
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          # Restart TermService
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Random Password
        run: |
          # Generate random password
          $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()'
          $password = -join ($chars.ToCharArray() | Get-Random -Count 16)
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          # Create user if not exists
          if (-not (Get-LocalUser -Name "TOOLBOXLAP" -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name "TOOLBOXLAP" -Password $securePass -AccountNeverExpires
          }

          # Add to groups
          Add-LocalGroupMember -Group "Administrators" -Member "TOOLBOXLAP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "TOOLBOXLAP"

          # Set as masked env var
          echo "RDP_USER=TOOLBOXLAP" >> $env:GITHUB_ENV
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
          echo "::add-mask::$password"

      - name: Install Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Upgrade pip
        run: python -m pip install --upgrade pip setuptools wheel

      - name: Install Essential Python Packages with Retry
        shell: pwsh
        run: |
          $packages = @(
              "requests",
              "numpy",
              "pandas",
              "matplotlib",
              "scipy",
              "Flask",
              "Django",
              "pytest",
              "ipython",
              "cryptography",
              "pycryptodome"
          )
          $maxAttempts = 3
          foreach ($pkg in $packages) {
              $attempt = 0
              do {
                  try {
                      python -m pip install --upgrade $pkg
                      Write-Host "✅ Installed $pkg"
                      break
                  } catch {
                      $attempt++
                      Write-Host "⚠️ Install failed for $pkg. Attempt $attempt of $maxAttempts."
                      if ($attempt -ge $maxAttempts) { throw $_ }
                      Start-Sleep -Seconds 10
                  }
              } while ($attempt -lt $maxAttempts)
          }

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait -NoNewWindow
          Remove-Item $installerPath -Force

          # Verify installation
          $tailscalePath = "${env:ProgramFiles}\Tailscale\tailscale.exe"
          if (-not (Test-Path $tailscalePath)) {
              Write-Error "Tailscale installation failed: executable not found."
              exit 1
          }

      - name: Establish Tailscale Connection
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          if (-not $env:TAILSCALE_AUTH_KEY) {
              Write-Error "TAILSCALE_AUTH_KEY secret is not set."
              exit 1
          }

          & "${env:ProgramFiles}\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=gh-runner-$env:GITHUB_RUN_ID

          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              Start-Sleep -Seconds 5
              $tsIP = & "${env:ProgramFiles}\Tailscale\tailscale.exe" ip -4 2>&1
              if ($tsIP -match '^\d+\.\d+\.\d+\.\d+$') {
                  break
              }
              $tsIP = $null
              $retries++
          }

          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned after 10 attempts."
              & "${env:ProgramFiles}\Tailscale\tailscale.exe" status
              exit 1
          }

          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          echo "::add-mask::$tsIP"

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Testing connectivity to RDP port on Tailscale IP..."
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -WarningAction SilentlyContinue
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "✅ TCP connectivity successful!"

      - name: Maintain Connection (72h) and Display Credentials Securely
        run: |
          Write-Host "`n=== 🔐 RDP ACCESS (Masked in logs) ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: $env:RDP_USER"
          Write-Host "Password: ******** (masked)"
          Write-Host "====================================`n"

          Write-Host "Keeping runner alive for 72 hours..."
          $end = (Get-Date).AddHours(72)
          while ((Get-Date) -lt $end) {
              Write-Host "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] RDP session active. Auto-stop at $(Get-Date $end -Format 'HH:mm:ss')"
              Start-Sleep -Seconds 300
          }

          Write-Host "72 hours completed. Workflow ending."

      # اختياري: إيقاف tailscale عند الانتهاء (لتنظيف)
      - name: Cleanup Tailscale (Optional)
        if: always()
        run: |
          if (Test-Path "${env:ProgramFiles}\Tailscale\tailscale.exe") {
              & "${env:ProgramFiles}\Tailscale\tailscale.exe" down
          }
